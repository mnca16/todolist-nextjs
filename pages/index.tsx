import React, { useState } from "react"
import Head from "next/head"
import styles from "../styles/Home.module.css"
import AddListForm from "../components/AddListForm"
import Lists from "../components/Lists"
import connectMongo from "../lib/connectMongo"
import List from "../models/list"
import { GetServerSideProps, NextPage } from "next"


// THIS INDEX FILE SHOWS THE LISTS

interface ListsNames {
  deleted: boolean,
  name: string,
  _v: number,
  _id: string
}

interface HomePageProps {
  listsName: ListsNames[]
}

//export default function HomePage({ listsName }) {
const HomePage: NextPage<HomePageProps> = ({ listsName }) => {
  const [list, setList] = useState(listsName)

  const addNewList = (newList: ListsNames) => {
    setList([...list, newList])
  }

  const deleteList = (id: number) => {
    try {
      fetch(`/api/lists/${id}`, {
        method: "PATCH",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ deleted: true }),
      })
        .then((res) => res.json())
        .then((res) => {
          const deletedList = list.filter(
            (item) => item._id !== res.deletedList._id
          )
          setList(deletedList)
        })
    } catch (error) {
      console.log("fetch request failed", error)
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Todo</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AddListForm addNewList={addNewList} />
      <Lists list={list} deleteList={deleteList} />
    </div>
  )
}

//Get list names from mongo using ServerSide props which would render the first time
export const getServerSideProps: GetServerSideProps = async () => {
  await connectMongo() // ---> connects to mongo
  try {
    const listSchemaResult = await List.find({ deleted: false }) // ---> grabs the schema with the and uses mongoose get(find) method (CRUD)
    const listsName = listSchemaResult.map((doc) => {
      //converts the mongoose document to js object
      const list = doc.toObject()
      list._id = list._id.toString()
      return list
    })
    return {
      props: { listsName: listsName },
    }
  } catch (error) {
    console.log(error)
    return {
      notFound: true,
    }
  }
}

export default HomePage

// export async function getServerSideProps() {
//   await connectMongo() // ---> connects to mongo
//   try {
//     const listSchemaResult = await List.find({ deleted: false }) // ---> grabs the schema with the and uses mongoose get(find) method (CRUD)
//     const listsName = listSchemaResult.map((doc) => {
//       //converts the mongoose document to js object
//       const list = doc.toObject()
//       list._id = list._id.toString()
//       return list
//     })
//     return {
//       props: { listsName: listsName },
//     }
//   } catch (error) {
//     console.log(error)
//     return {
//       notFound: true,
//     }
//   }
// }
